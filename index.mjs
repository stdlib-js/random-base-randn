// Copyright (c) 2022 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@esm/index.mjs";import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@esm/index.mjs";import r from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-boolean@esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-box-muller@esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-improved-ziggurat@esm/index.mjs";var l={name:"improved-ziggurat",copy:!0},c={};c["box-muller"]=p,c["improved-ziggurat"]=m;var u=c,f=e,g=t,h=n,j=r,v=s.isPrimitive,y=o,b=i,w=d,x=a,E=l,L=u;var N=function(e){var t,n,r;if(t={name:E.name,copy:E.copy},arguments.length){if(!j(e))throw new TypeError("invalid argument. Must provide an object. Value: `"+e+"`.");if(y(e,"name")&&(t.name=e.name),y(e,"prng")){if(t.prng=e.prng,void 0===t.prng)throw new TypeError("invalid option. `prng` option cannot be undefined. Option: `"+t.prng+"`.")}else if(y(e,"state")){if(t.state=e.state,void 0===t.state)throw new TypeError("invalid option. `state` option cannot be undefined. Option: `"+t.state+"`.")}else if(y(e,"seed")&&(t.seed=e.seed,void 0===t.seed))throw new TypeError("invalid option. `seed` option cannot be undefined. Option: `"+t.seed+"`.");if(y(e,"copy")&&(t.copy=e.copy,!v(t.copy)))throw new TypeError("invalid option. `copy` option must be a boolean. Option: `"+t.copy+"`.")}if(void 0===(r=L[t.name]))throw new Error("invalid option. Unrecognized/unsupported PRNG. Option: `"+t.name+"`.");return n=void 0===t.prng?void 0===t.state?void 0===t.seed?r.factory():r.factory({seed:t.seed}):r.factory({state:t.state,copy:t.copy}):r.factory({prng:t.prng}),f(l,"NAME","randn"),t.prng?(f(l,"seed",null),f(l,"seedLength",null),h(l,"state",b(null),w),f(l,"stateLength",null),f(l,"byteLength",null),f(l,"toJSON",b(null))):(g(l,"seed",s),g(l,"seedLength",o),h(l,"state",a,p),g(l,"stateLength",i),g(l,"byteLength",d),f(l,"toJSON",m)),f(l,"PRNG",n.PRNG),l;function s(){return n.seed}function o(){return n.seedLength}function i(){return n.stateLength}function d(){return n.byteLength}function a(){return n.state}function p(e){n.state=e}function m(){var e={type:"PRNG"};return e.name=l.NAME+"-"+n.NAME,e.state=x(n.state),e.params=[],e}function l(){return n()}},O=N(),P=N;e(O,"factory",P);var T=O;export{T as default,P as factory};
//# sourceMappingURL=index.mjs.map

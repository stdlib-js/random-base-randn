{"version":3,"file":"index.mjs","sources":["../lib/prngs.js","../lib/factory.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport boxMuller from '@stdlib/random-base-box-muller';\nimport improvedZiggurat from '@stdlib/random-base-improved-ziggurat';\n\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'box-muller' ] = boxMuller;\nprngs[ 'improved-ziggurat' ] = improvedZiggurat;\n\n\n// EXPORTS //\n\nexport default prngs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport setReadOnlyAccessor from '@stdlib/utils-define-nonenumerable-read-only-accessor';\nimport setReadWriteAccessor from '@stdlib/utils-define-nonenumerable-read-write-accessor';\nimport isObject from '@stdlib/assert-is-plain-object';\nimport { isPrimitive as isBoolean } from '@stdlib/assert-is-boolean';\nimport hasOwnProp from '@stdlib/assert-has-own-property';\nimport constantFunction from '@stdlib/utils-constant-function';\nimport format from '@stdlib/error-tools-fmtprodmsg';\nimport noop from '@stdlib/utils-noop';\nimport typedarray2json from '@stdlib/array-to-json';\nimport defaults from './defaults.json';\nimport PRNGS from './prngs.js';\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for numbers from a standard normal distribution.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='improved-ziggurat'] - name of pseudorandom number generator\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller'\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( format( '0oz47,Gz', options ) );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\topts.prng = options.prng;\n\t\t\tif ( opts.prng === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0oz7Y,NT', 'prng', opts.prng ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0oz7Y,NT', 'state', opts.state ) );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( format( '0oz7Y,NT', 'seed', opts.seed ) );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( format( '0oz2o,GE', 'copy', opts.copy ) );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( format( '0oz7Z,NU', opts.name ) );\n\t}\n\tif ( opts.prng === void 0 ) {\n\t\tif ( opts.state === void 0 ) {\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\trand = prng.factory();\n\t\t\t} else {\n\t\t\t\trand = prng.factory({\n\t\t\t\t\t'seed': opts.seed\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'state': opts.state,\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'prng': opts.prng\n\t\t});\n\t}\n\tsetReadOnly( normal, 'NAME', 'randn' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts.prng ) {\n\t\tsetReadOnly( normal, 'seed', null );\n\t\tsetReadOnly( normal, 'seedLength', null );\n\t\tsetReadWriteAccessor( normal, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( normal, 'stateLength', null );\n\t\tsetReadOnly( normal, 'byteLength', null );\n\t\tsetReadOnly( normal, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( normal, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( normal, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( normal, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( normal, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( normal, 'byteLength', getStateSize );\n\t\tsetReadOnly( normal, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( normal, 'PRNG', rand.PRNG );\n\treturn normal;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = normal.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a standard normal distribution.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal();\n\t* // returns <number>\n\t*/\n\tfunction normal() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nexport default factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport factory from './factory.js';\n\n\n// MAIN //\n\n/**\n* Returns a standard normal random number.\n*\n* @name normal\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal();\n* // returns <number>\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nexport default normal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard normal pseudorandom numbers.\n*\n* @module @stdlib/random-base-randn\n*\n* @example\n* import randn from '@stdlib/random-base-randn';\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* import { factory as factory } from '@stdlib/random-base-randn';\n*\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n*\n* var v = randn();\n* // returns <number>\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport factory from './factory.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'factory', factory );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["prngs","factory","options","opts","rand","prng","name","defaults","copy","arguments","length","isObject","TypeError","format","hasOwnProp","state","seed","isBoolean","PRNGS","Error","setReadOnly","normal","setReadWriteAccessor","constantFunction","noop","setReadOnlyAccessor","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","PRNG","seedLength","stateLength","byteLength","s","out","NAME","typedarray2json","params","boxMuller","improvedZiggurat","main"],"mappings":";;0qCA4BIA,EAAQ,CAAA,ECoDZ,SAASC,EAASC,GACjB,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAO,CACNG,KAAQC,EACRC,KAAQD,GAEJE,UAAUC,OAAS,CACvB,IAAMC,EAAUT,GACf,MAAM,IAAIU,UAAWC,EAAQ,WAAYX,IAK1C,GAHKY,EAAYZ,EAAS,UACzBC,EAAKG,KAAOJ,EAAQI,MAEhBQ,EAAYZ,EAAS,SAEzB,GADAC,EAAKE,KAAOH,EAAQG,UACD,IAAdF,EAAKE,KACT,MAAM,IAAIO,UAAWC,EAAQ,WAAY,OAAQV,EAAKE,YAEjD,GAAKS,EAAYZ,EAAS,UAEhC,GADAC,EAAKY,MAAQb,EAAQa,WACD,IAAfZ,EAAKY,MACT,MAAM,IAAIH,UAAWC,EAAQ,WAAY,QAASV,EAAKY,aAElD,GAAKD,EAAYZ,EAAS,UAChCC,EAAKa,KAAOd,EAAQc,UACD,IAAdb,EAAKa,MACT,MAAM,IAAIJ,UAAWC,EAAQ,WAAY,OAAQV,EAAKa,OAGxD,GAAKF,EAAYZ,EAAS,UACzBC,EAAKK,KAAON,EAAQM,MACdS,EAAWd,EAAKK,OACrB,MAAM,IAAII,UAAWC,EAAQ,WAAY,OAAQV,EAAKK,MAGxD,CAED,QAAc,KADdH,EAAOa,EAAOf,EAAKG,OAElB,MAAM,IAAIa,MAAON,EAAQ,WAAYV,EAAKG,OAyC3C,OApCGF,OAHgB,IAAdD,EAAKE,UACW,IAAfF,EAAKY,WACU,IAAdZ,EAAKa,KACFX,EAAKJ,UAELI,EAAKJ,QAAQ,CACnBe,KAAQb,EAAKa,OAIRX,EAAKJ,QAAQ,CACnBc,MAASZ,EAAKY,MACdP,KAAQL,EAAKK,OAIRH,EAAKJ,QAAQ,CACnBI,KAAQF,EAAKE,OAGfe,EAAaC,EAAQ,OAAQ,SAGxBlB,EAAKE,MACTe,EAAaC,EAAQ,OAAQ,MAC7BD,EAAaC,EAAQ,aAAc,MACnCC,EAAsBD,EAAQ,QAASE,EAAkB,MAAQC,GACjEJ,EAAaC,EAAQ,cAAe,MACpCD,EAAaC,EAAQ,aAAc,MACnCD,EAAaC,EAAQ,SAAUE,EAAkB,SAEjDE,EAAqBJ,EAAQ,OAAQK,GACrCD,EAAqBJ,EAAQ,aAAcM,GAC3CL,EAAsBD,EAAQ,QAASO,EAAUC,GACjDJ,EAAqBJ,EAAQ,cAAeS,GAC5CL,EAAqBJ,EAAQ,aAAcU,GAC3CX,EAAaC,EAAQ,SAAUW,IAEhCZ,EAAaC,EAAQ,OAAQjB,EAAK6B,MAC3BZ,EAQP,SAASK,IACR,OAAOtB,EAAKY,IACZ,CAQD,SAASW,IACR,OAAOvB,EAAK8B,UACZ,CAQD,SAASJ,IACR,OAAO1B,EAAK+B,WACZ,CAQD,SAASJ,IACR,OAAO3B,EAAKgC,UACZ,CAQD,SAASR,IACR,OAAOxB,EAAKW,KACZ,CASD,SAASc,EAAUQ,GAClBjC,EAAKW,MAAQsB,CACb,CAYD,SAASL,IACR,IAAIM,EAAM,CACVA,KAAW,QAIX,OAHAA,EAAIhC,KAAOe,EAAOkB,KAAO,IAAMnC,EAAKmC,KACpCD,EAAIvB,MAAQyB,EAAiBpC,EAAKW,OAClCuB,EAAIG,OAAS,GACNH,CACP,CAYD,SAASjB,IACR,OAAOjB,GACP,CACF,CDnOAJ,EAAO,cAAiB0C,EACxB1C,EAAO,qBAAwB2C,EEO5B,IAACtB,EAASpB,ICcbmB,EAAAwB,EAAA,UAAA3C"}
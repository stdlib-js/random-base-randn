{"version":3,"file":"index.mjs","sources":["../lib/prngs.js","../lib/factory.js","../lib/index.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\nvar prngs = {};\n\nprngs[ 'box-muller' ] = require( '@stdlib/random-base-box-muller' );\nprngs[ 'improved-ziggurat' ] = require( '@stdlib/random-base-improved-ziggurat' );\n\n\n// EXPORTS //\n\nmodule.exports = prngs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils-define-nonenumerable-read-only-accessor' );\nvar setReadWriteAccessor = require( '@stdlib/utils-define-nonenumerable-read-write-accessor' );\nvar isObject = require( '@stdlib/assert-is-plain-object' );\nvar isBoolean = require( '@stdlib/assert-is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert-has-own-property' );\nvar constantFunction = require( '@stdlib/utils-constant-function' );\nvar noop = require( '@stdlib/utils-noop' );\nvar typedarray2json = require( '@stdlib/array-to-json' );\nvar defaults = require( './defaults.json' );\nvar PRNGS = require( './prngs.js' );\n\n\n// MAIN //\n\n/**\n* Returns a pseudorandom number generator for numbers from a standard normal distribution.\n*\n* @param {Options} [options] - function options\n* @param {string} [options.name='improved-ziggurat'] - name of pseudorandom number generator\n* @param {PRNG} [options.prng] - pseudorandom number generator which generates uniformly distributed pseudorandom numbers\n* @param {*} [options.seed] - pseudorandom number generator seed\n* @param {*} [options.state] - pseudorandom number generator state\n* @param {boolean} [options.copy=true] - boolean indicating whether to copy a provided pseudorandom number generator state\n* @throws {TypeError} must provide an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} must provide the name of a supported pseudorandom number generator\n* @returns {PRNG} pseudorandom number generator\n*\n* @example\n* var randn = factory();\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller'\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n* var v = randn();\n* // returns <number>\n*/\nfunction factory( options ) {\n\tvar opts;\n\tvar rand;\n\tvar prng;\n\n\topts = {\n\t\t'name': defaults.name,\n\t\t'copy': defaults.copy\n\t};\n\tif ( arguments.length ) {\n\t\tif ( !isObject( options ) ) {\n\t\t\tthrow new TypeError( 'invalid argument. Must provide an object. Value: `' + options + '`.' );\n\t\t}\n\t\tif ( hasOwnProp( options, 'name' ) ) {\n\t\t\topts.name = options.name;\n\t\t}\n\t\tif ( hasOwnProp( options, 'prng' ) ) {\n\t\t\topts.prng = options.prng;\n\t\t\tif ( opts.prng === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `prng` option cannot be undefined. Option: `' + opts.prng + '`.' );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'state' ) ) {\n\t\t\topts.state = options.state;\n\t\t\tif ( opts.state === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `state` option cannot be undefined. Option: `' + opts.state + '`.' );\n\t\t\t}\n\t\t} else if ( hasOwnProp( options, 'seed' ) ) {\n\t\t\topts.seed = options.seed;\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `seed` option cannot be undefined. Option: `' + opts.seed + '`.' );\n\t\t\t}\n\t\t}\n\t\tif ( hasOwnProp( options, 'copy' ) ) {\n\t\t\topts.copy = options.copy;\n\t\t\tif ( !isBoolean( opts.copy ) ) {\n\t\t\t\tthrow new TypeError( 'invalid option. `copy` option must be a boolean. Option: `' + opts.copy + '`.' );\n\t\t\t}\n\t\t}\n\t}\n\tprng = PRNGS[ opts.name ];\n\tif ( prng === void 0 ) {\n\t\tthrow new Error( 'invalid option. Unrecognized/unsupported PRNG. Option: `' + opts.name + '`.' );\n\t}\n\tif ( opts.prng === void 0 ) {\n\t\tif ( opts.state === void 0 ) {\n\t\t\tif ( opts.seed === void 0 ) {\n\t\t\t\trand = prng.factory();\n\t\t\t} else {\n\t\t\t\trand = prng.factory({\n\t\t\t\t\t'seed': opts.seed\n\t\t\t\t});\n\t\t\t}\n\t\t} else {\n\t\t\trand = prng.factory({\n\t\t\t\t'state': opts.state,\n\t\t\t\t'copy': opts.copy\n\t\t\t});\n\t\t}\n\t} else {\n\t\trand = prng.factory({\n\t\t\t'prng': opts.prng\n\t\t});\n\t}\n\tsetReadOnly( normal, 'NAME', 'randn' );\n\n\t// If we are provided an \"external\" PRNG, we don't support getting or setting PRNG state, as we'd need to check for compatible state value types, etc, entailing considerable complexity.\n\tif ( opts.prng ) {\n\t\tsetReadOnly( normal, 'seed', null );\n\t\tsetReadOnly( normal, 'seedLength', null );\n\t\tsetReadWriteAccessor( normal, 'state', constantFunction( null ), noop );\n\t\tsetReadOnly( normal, 'stateLength', null );\n\t\tsetReadOnly( normal, 'byteLength', null );\n\t\tsetReadOnly( normal, 'toJSON', constantFunction( null ) );\n\t} else {\n\t\tsetReadOnlyAccessor( normal, 'seed', getSeed );\n\t\tsetReadOnlyAccessor( normal, 'seedLength', getSeedLength );\n\t\tsetReadWriteAccessor( normal, 'state', getState, setState );\n\t\tsetReadOnlyAccessor( normal, 'stateLength', getStateLength );\n\t\tsetReadOnlyAccessor( normal, 'byteLength', getStateSize );\n\t\tsetReadOnly( normal, 'toJSON', toJSON );\n\t}\n\tsetReadOnly( normal, 'PRNG', rand.PRNG );\n\treturn normal;\n\n\t/**\n\t* Returns the PRNG seed.\n\t*\n\t* @private\n\t* @returns {*} seed\n\t*/\n\tfunction getSeed() {\n\t\treturn rand.seed;\n\t}\n\n\t/**\n\t* Returns the PRNG seed length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} seed length\n\t*/\n\tfunction getSeedLength() {\n\t\treturn rand.seedLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state length.\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state length\n\t*/\n\tfunction getStateLength() {\n\t\treturn rand.stateLength;\n\t}\n\n\t/**\n\t* Returns the PRNG state size (in bytes).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} state size (in bytes)\n\t*/\n\tfunction getStateSize() {\n\t\treturn rand.byteLength;\n\t}\n\n\t/**\n\t* Returns the current pseudorandom number generator state.\n\t*\n\t* @private\n\t* @returns {*} current state\n\t*/\n\tfunction getState() {\n\t\treturn rand.state;\n\t}\n\n\t/**\n\t* Sets the pseudorandom number generator state.\n\t*\n\t* @private\n\t* @param {*} s - generator state\n\t* @throws {Error} must provide a valid state\n\t*/\n\tfunction setState( s ) {\n\t\trand.state = s;\n\t}\n\n\t/**\n\t* Serializes the pseudorandom number generator as a JSON object.\n\t*\n\t* ## Notes\n\t*\n\t* -   `JSON.stringify()` implicitly calls this method when stringifying a PRNG.\n\t*\n\t* @private\n\t* @returns {Object} JSON representation\n\t*/\n\tfunction toJSON() {\n\t\tvar out = {};\n\t\tout.type = 'PRNG';\n\t\tout.name = normal.NAME + '-' + rand.NAME;\n\t\tout.state = typedarray2json( rand.state );\n\t\tout.params = [];\n\t\treturn out;\n\t}\n\n\t/**\n\t* Returns a pseudorandom number drawn from a standard normal distribution.\n\t*\n\t* @private\n\t* @returns {number} pseudorandom number\n\t*\n\t* @example\n\t* var v = normal();\n\t* // returns <number>\n\t*/\n\tfunction normal() {\n\t\treturn rand();\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Standard normal pseudorandom numbers.\n*\n* @module @stdlib/random-base-randn\n*\n* @example\n* var randn = require( '@stdlib/random-base-randn' );\n*\n* var v = randn();\n* // returns <number>\n*\n* @example\n* var factory = require( '@stdlib/random-base-randn' ).factory;\n*\n* var randn = factory({\n*     'name': 'box-muller',\n*     'seed': 12345\n* });\n*\n* var v = randn();\n* // returns <number>\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar randn = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( randn, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = randn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\n/**\n* Returns a standard normal random number.\n*\n* @name normal\n* @type {PRNG}\n* @returns {number} pseudorandom number\n*\n* @example\n* var v = normal();\n* // returns <number>\n*/\nvar normal = factory();\n\n\n// EXPORTS //\n\nmodule.exports = normal;\n"],"names":["prngs","require$$0","require$$1","prngs_1","setReadOnly","setReadOnlyAccessor","setReadWriteAccessor","require$$2","isObject","require$$3","isBoolean","require$$4","isPrimitive","hasOwnProp","require$$5","constantFunction","require$$6","noop","require$$7","typedarray2json","require$$8","defaults","require$$9","PRNGS","require$$10","factory_1","options","opts","rand","prng","name","copy","arguments","length","TypeError","state","seed","Error","factory","normal","getSeed","getSeedLength","getState","setState","getStateLength","getStateSize","toJSON","PRNG","seedLength","stateLength","byteLength","s","out","NAME","params","randn","lib"],"mappings":";;4jCAsBIA,EAAQ,GAEZA,EAAO,cAAiBC,EACxBD,EAAO,qBAAwBE,EAK/B,IAAAC,EAAiBH,ECRbI,EAAcH,EACdI,EAAsBH,EACtBI,EAAuBC,EACvBC,EAAWC,EACXC,EAAYC,EAAuCC,YACnDC,EAAaC,EACbC,EAAmBC,EACnBC,EAAOC,EACPC,EAAkBC,EAClBC,EAAWC,EACXC,EAAQC,EAqOZ,IAAAC,EAtLA,SAAkBC,GACjB,IAAIC,EACAC,EACAC,EAMJ,GAJAF,EAAO,CACNG,KAAQT,EAASS,KACjBC,KAAQV,EAASU,MAEbC,UAAUC,OAAS,CACvB,IAAMzB,EAAUkB,GACf,MAAM,IAAIQ,UAAW,qDAAuDR,EAAU,MAKvF,GAHKb,EAAYa,EAAS,UACzBC,EAAKG,KAAOJ,EAAQI,MAEhBjB,EAAYa,EAAS,SAEzB,GADAC,EAAKE,KAAOH,EAAQG,UACD,IAAdF,EAAKE,KACT,MAAM,IAAIK,UAAW,+DAAiEP,EAAKE,KAAO,WAE7F,GAAKhB,EAAYa,EAAS,UAEhC,GADAC,EAAKQ,MAAQT,EAAQS,WACD,IAAfR,EAAKQ,MACT,MAAM,IAAID,UAAW,gEAAkEP,EAAKQ,MAAQ,WAE/F,GAAKtB,EAAYa,EAAS,UAChCC,EAAKS,KAAOV,EAAQU,UACD,IAAdT,EAAKS,MACT,MAAM,IAAIF,UAAW,+DAAiEP,EAAKS,KAAO,MAGpG,GAAKvB,EAAYa,EAAS,UACzBC,EAAKI,KAAOL,EAAQK,MACdrB,EAAWiB,EAAKI,OACrB,MAAM,IAAIG,UAAW,6DAA+DP,EAAKI,KAAO,MAKnG,QAAc,KADdF,EAAON,EAAOI,EAAKG,OAElB,MAAM,IAAIO,MAAO,2DAA6DV,EAAKG,KAAO,MAyC3F,OApCGF,OAHgB,IAAdD,EAAKE,UACW,IAAfF,EAAKQ,WACU,IAAdR,EAAKS,KACFP,EAAKS,UAELT,EAAKS,QAAQ,CACnBF,KAAQT,EAAKS,OAIRP,EAAKS,QAAQ,CACnBH,MAASR,EAAKQ,MACdJ,KAAQJ,EAAKI,OAIRF,EAAKS,QAAQ,CACnBT,KAAQF,EAAKE,OAGfzB,EAAamC,EAAQ,OAAQ,SAGxBZ,EAAKE,MACTzB,EAAamC,EAAQ,OAAQ,MAC7BnC,EAAamC,EAAQ,aAAc,MACnCjC,EAAsBiC,EAAQ,QAASxB,EAAkB,MAAQE,GACjEb,EAAamC,EAAQ,cAAe,MACpCnC,EAAamC,EAAQ,aAAc,MACnCnC,EAAamC,EAAQ,SAAUxB,EAAkB,SAEjDV,EAAqBkC,EAAQ,OAAQC,GACrCnC,EAAqBkC,EAAQ,aAAcE,GAC3CnC,EAAsBiC,EAAQ,QAASG,EAAUC,GACjDtC,EAAqBkC,EAAQ,cAAeK,GAC5CvC,EAAqBkC,EAAQ,aAAcM,GAC3CzC,EAAamC,EAAQ,SAAUO,IAEhC1C,EAAamC,EAAQ,OAAQX,EAAKmB,MAC3BR,EAQP,SAASC,IACR,OAAOZ,EAAKQ,KASb,SAASK,IACR,OAAOb,EAAKoB,WASb,SAASJ,IACR,OAAOhB,EAAKqB,YASb,SAASJ,IACR,OAAOjB,EAAKsB,WASb,SAASR,IACR,OAAOd,EAAKO,MAUb,SAASQ,EAAUQ,GAClBvB,EAAKO,MAAQgB,EAad,SAASL,IACR,IAAIM,EAAM,CACVA,KAAW,QAIX,OAHAA,EAAItB,KAAOS,EAAOc,KAAO,IAAMzB,EAAKyB,KACpCD,EAAIjB,MAAQhB,EAAiBS,EAAKO,OAClCiB,EAAIE,OAAS,GACNF,EAaR,SAASb,IACR,OAAOX,MChNT2B,ECxBctD,IDyBdqC,EAAA/B,EAFAN,EAOAsD,EAAA,UAAAjB,GAKA,IAAAkB,EAAAD"}